# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
defaults: &defaults
  docker:
    - image: circleci/python:3.6.5-node
  working_directory: ~/retitle

# A yaml variable that describes a job step
# Used to setup the the devtool
devtool_and_protos: &devtool_and_protos
  name: setup devtool and compile protos
  command: |
    python3 -m venv devtool/venv
    source devtool/venv/bin/activate
    pip install -r devtool/requirements.txt

    curl -OL https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-linux-x86_64.zip

    unzip -o protoc-3.3.0-linux-x86_64.zip -d protoc3

    sudo cp -r protoc3/bin/* /usr/local/bin/

    sudo cp -r protoc3/include/* /usr/local/include/

    sudo chown circleci /usr/local/bin/protoc
    sudo chown -R circleci /usr/local/include/google
    sudo npm install -g protobufjs@6.8.6
    ./devtool/dev protos
    ./devtool/dev protos

# A yaml variable that describes an entire job.
# Sets up CLI environment for deployment and builds
# Can be reused in multiple workflows
setup: &setup
  <<: *defaults
  resource_class: large
  steps:
    - checkout
    - run:
        name: Install Git LFS
        command: |
          curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
          sudo apt-get install git-lfs
          git lfs fetch
          git lfs checkout
    - run:
        name: Install Convox CLI
        command: |
          curl -L https://convox.com/cli/linux/convox -o ./convox
          chmod +x ./convox
    - run:
        <<: *devtool_and_protos
    - run:
        name: Display yarn cache version
        command: |
          echo "Current yarn cache version: $YARN_CACHE_VERSION"
    - restore_cache:
        name: Restore Yarn Package Cache
        keys:
          - yarn-packages-{{ .Environment.YARN_CACHE_VERSION }}-{{ checksum "jsapp/yarn.lock" }}
    - run:
        name: frontend
        command: |
          export PATH=$HOME/.yarn/bin:$PATH
          cd jsapp && yarn && yarn build_production
    - save_cache:
        name: Save Yarn Package Cache
        key: yarn-packages-{{ .Environment.YARN_CACHE_VERSION }}-{{ checksum "jsapp/yarn.lock" }}
        paths:
          - jsapp/node_modules
    - run:
        name: replace git_sha placeholder
        command: |
          echo -n $CIRCLE_SHA1 > ./git_sha
    - persist_to_workspace:
        root: .
        paths:
          - webapp
          - jsapp/dist
          - '*.yml'
          - convox
          - e2e
          - build_circle_scripts
          - build_scripts
          - protos
          - git_sha
          - devtool
          - sync_scraper
          - local_dev_services
          - '*.json'
          - post_circle_to_slack.py

build_image: &build_image
  <<: *defaults
  steps:
    - attach_workspace:
        at: ~/retitle
    - run:
        <<: *devtool_and_protos
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Build
        no_output_timeout: '20m'
        command: |
          export start=$SECONDS
          ./build_circle_scripts/build_image.sh webapp
          echo "AFTER_BUILD "$(( SECONDS - start ))
          docker ps -a
          docker volume ls

# This job prepares a convox build for release.
# After this job is run, you can promote a convox release to production.
build_production: &build_production
  <<: *defaults
  steps:
    - attach_workspace:
        at: ~/retitle
    - run:
        name: build_production
        no_output_timeout: '20m'
        command: |
          ./convox login $CONVOX_HOST -p $CONVOX_PASSWORD
          ./convox switch production

          mkdir temp_production_deploy
          cp build_scripts/convox-production.yml temp_production_deploy/convox.yml
          sed -i 's/GIT_SHA/'$CIRCLE_SHA1'/g' temp_production_deploy/convox.yml

          ./convox build --app glide --rack=production --description=$CIRCLE_SHA1 --id ./temp_production_deploy 2> convoxbuilderror.txt 1> convoxproductionbuildid.txt
          cat convoxproductionbuildid.txt
    - persist_to_workspace:
        root: .
        paths:
          - ./convoxproductionbuildid.txt

version: 2
jobs:
  setup:
    <<: *setup
  setup_hotfix_production:
    <<: *setup
  build_image:
    <<: *build_image
  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/retitle
      - setup_remote_docker:
          docker_layer_caching: true # default - true
      - run:
          name: Pull images
          command: |
            pip install --user awscli
            export AWS_ACCESS_KEY_ID=$ECR_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$ECR_AWS_SECRET_ACCESS_KEY
            $(~/.local/bin/aws ecr get-login --no-include-email --region us-west-1)
            docker-compose -f docker-compose-test.yml pull
      - run:
          name: run_tests
          no_output_timeout: '20m'
          command: |
            docker-compose -f docker-compose-test.yml run -d db
            docker-compose -f docker-compose-test.yml up -d
            echo "AFTER_UP "$(( SECONDS - start ))
            echo 'BEGINNING_TESTS'
            docker-compose -f docker-compose-test.yml exec -T webapp touch /tmp/e2e_test_results.xml
            docker-compose -f docker-compose-test.yml exec -T webapp touch /tmp/test_results.xml
            docker-compose -f docker-compose-test.yml exec -T webapp /code/run_tests.sh $CIRCLE_NODE_INDEX
      - run:
          name: get_test_results_from_container
          when: always
          command: |
            mkdir ~/test_results
            docker-compose -f docker-compose-test.yml logs --tail="all" webapp > ~/test_results/webapp_logs.txt
            docker cp "$(docker ps --filter="name=webapp" -q)":/tmp/test_results.xml ~/test_results/webapp.xml
      - store_test_results:
          path: ~/test_results
      - store_artifacts:
          path: ~/test_results

  e2e_test:
    <<: *defaults
    parallelism: 4
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/retitle
      - setup_remote_docker:
          docker_layer_caching: true # default - true
      - run:
          name: Pull images
          command: |
            pip install --user awscli
            export AWS_ACCESS_KEY_ID=$ECR_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$ECR_AWS_SECRET_ACCESS_KEY
            $(~/.local/bin/aws ecr get-login --no-include-email --region us-west-1)
            docker-compose -f docker-compose-test.yml pull
      - run:
          name: run_tests
          no_output_timeout: '20m'
          command: |
            docker-compose -f docker-compose-test.yml run -d db
            docker-compose -f docker-compose-test.yml up -d
            echo "AFTER_UP "$(( SECONDS - start ))
            echo 'BEGINNING_TESTS'
            docker-compose -f docker-compose-test.yml exec -T webapp touch /tmp/e2e_test_results.xml
            docker-compose -f docker-compose-test.yml exec -T webapp /code/run_e2e_tests.sh $CIRCLE_NODE_INDEX
      - run:
          name: get_test_results_from_container
          when: always
          command: |
            mkdir ~/test_results
            docker cp "$(docker ps --filter="name=webapp" -q)":/tmp/e2e_test_results.xml ~/test_results/e2e.xml
            docker cp "$(docker ps --filter="name=webapp" -q)":/tmp/test_results/screenshots ~/test_results/screenshots
      - store_test_results:
          path: ~/test_results
      - store_artifacts:
          path: ~/test_results

  # This job builds the convox staging release
  # It also reads decrypts and reads the environment variables from the staging_secrets.json file
  # The environment variables are then set before the release is produced.
  # This means that you don't need to manually update environment variables for staging, you can just update the staging_secrets and check it in.
  # Production does NOT update environment variables automatically.
  build_staging:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/retitle
      - run:
          name: build_staging
          no_output_timeout: '20m'
          command: |
            ./convox login $CONVOX_HOST -p $CONVOX_PASSWORD
            ./convox switch staging

            mkdir temp_staging_deploy
            cp build_scripts/convox-staging.yml temp_staging_deploy/convox.yml
            sed -i 's/GIT_SHA/'$CIRCLE_SHA1'/g' temp_staging_deploy/convox.yml
            ./convox build --app glidenew --description=$CIRCLE_SHA1 --id ./temp_staging_deploy 2> convoxbuilderror.txt 1> convoxbuildid.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./convoxbuildid.txt
  build_demo:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/retitle
      - run:
          name: build_demo
          no_output_timeout: '20m'
          command: |
            ./convox login $CONVOX_HOST -p $CONVOX_PASSWORD
            ./convox switch staging

            mkdir temp_demo_deploy
            cp build_scripts/convox-demo.yml temp_demo_deploy/convox.yml
            sed -i 's/GIT_SHA/'$CIRCLE_SHA1'/g' temp_demo_deploy/convox.yml
            ./convox build --app demo --description=$CIRCLE_SHA1 --id ./temp_demo_deploy 2> convoxbuilderror.txt 1> convoxbuildid-demo.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./convoxbuildid-demo.txt
  build_production:
    <<: *build_production
  build_hotfix_production:
    <<: *build_production
  notify_production_ready:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/retitle
      - run:
          name: notify_production_ready
          no_output_timeout: '20m'
          command: |
            export RELEASE_ID="$(cat convoxproductionbuildid.txt | tr '\n' ' ' | sed -e 's/^[ \t]*//')"
            echo "PRODUCTION_RELEASE_ID"
            echo $RELEASE_ID
            sudo pip install requests
            python post_circle_to_slack.py
  deploy_staging:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/retitle
      - run:
          name: set_staging_env_variables
          command: |
            ./convox login $CONVOX_HOST -p $CONVOX_PASSWORD
            ./convox switch staging
            echo 'SETTING STAGING ENVIRONMENT VARIABLES'
            ./devtool/dev generate_env_file_from_secrets staging
            cat .staging_env | ./convox env set --app=glidenew
            rm .staging_env
            echo 'SET STAGING ENVIRONMENT VARIABLES'
      - run:
          name: deploy_staging
          command: |
            ./convox releases promote --app=glidenew --wait "$(cat convoxbuildid.txt | tr '\n' ' ' | sed -e 's/^[ \t]*//')"
  deploy_demo:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/retitle
      # - run:
      #     name: set_demo_env_variables
      #     command: |
      #       ./convox login $CONVOX_HOST -p $CONVOX_PASSWORD
      #       ./convox switch staging
      #       echo 'SETTING DEMO ENVIRONMENT VARIABLES'
      #       ./devtool/dev generate_env_file_from_secrets staging
      #       cat .staging_env | ./convox env set --app=demo
      #       rm .staging_env
      #       echo 'SET DEMO ENVIRONMENT VARIABLES'
      - run:
          name: deploy_demo
          command: |
            ./convox login $CONVOX_HOST -p $CONVOX_PASSWORD
            ./convox switch staging
            ./convox releases promote --app=demo --wait "$(cat convoxbuildid-demo.txt | tr '\n' ' ' | sed -e 's/^[ \t]*//')"
  hotfix_production:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/retitle
      - run:
          name: hotfix_production
          command: |
            ./convox login $CONVOX_HOST -p $CONVOX_PASSWORD
            ./convox releases promote --rack=production --wait "$(cat convoxproductionbuildid.txt | tr '\n' ' ' | sed -e 's/^[ \t]*//')"
  push_assets:
    <<: *defaults
    steps:
      - setup_remote_docker
      - run:
          name: Set up aws
          command: |
            pip install --user awscli
            export AWS_ACCESS_KEY_ID=$ECR_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$ECR_AWS_SECRET_ACCESS_KEY
            $(~/.local/bin/aws ecr get-login --no-include-email --region us-west-1)
      - run:
          name: push_assets
          command: |
            docker run -e AWS_ACCESS_KEY_ID=$PROD_ASSETS_AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$PROD_ASSETS_AWS_SECRET_ACCESS_KEY "503622336915.dkr.ecr.us-west-1.amazonaws.com/glide-master:${CIRCLE_SHA1}" bash -c "cd /code && python manage.py upload_assets --directory=/jsapp/dist --bucket=prodretitle-assets"

workflows:
  version: 2
  hotfix-production:
    jobs:
      - setup_hotfix_production:
          filters:
            branches:
              only: hotfix-production
      - build_hotfix_production:
          requires:
            - setup_hotfix_production
      - approve_hotfix:
          type: approval
          requires:
            - build_hotfix_production
      - hotfix_production:
          requires:
            - approve_hotfix
  build-and-deploy:
    jobs:
      - setup:
          filters:
            branches:
              ignore: hotfix-production
      - build_image:
          requires:
            - setup
      - test:
          requires:
            - setup
            - build_image
      - e2e_test:
          requires:
            - setup
            - build_image
      - build_staging:
          requires:
            - setup
            - build_image
          filters:
            branches:
              only:
                - master
      - build_demo:
          requires:
            - setup
            - build_image
          filters:
            branches:
              only:
                - master
      - build_production:
          requires:
            - setup
            - build_image
          filters:
            branches:
              only:
                - master
      - deploy_staging:
          requires:
            - test
            - e2e_test
            - build_staging
          filters:
            branches:
              only:
                - master
      - deploy_demo:
          requires:
            - test
            - e2e_test
            - build_demo
          filters:
            branches:
              only:
                - master
      - push_assets:
          requires:
            - setup
            - build_image
          filters:
            branches:
              only:
                - master
      - notify_production_ready:
          requires:
            - test
            - e2e_test
            - build_production
            - push_assets
          filters:
            branches:
              only:
                - master
